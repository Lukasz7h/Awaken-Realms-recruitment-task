import express from 'express';
import { z } from "zod"

import { getSummarizeOfArticle } from './openAI_API.js';
import { catchError } from './errorHandle.js';

const router = express.Router();

/**
 * @openapi
 * /summarize:
 *   post:
 *     tags:
 *       - URL Controller
 *     summary: Submit a URL for fetch text summary, additionaly you could add summaryLength param to set max allow length and LLModel in order to bind AI model liable for compose summary.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - url
 *             properties:
 *               url:
 *                 type: string
 *                 example: 'https://brilliant.org/wiki/rsa-encryption/'
 *               summaryLength:
 *                 type: integer
 *                 example: 250
 *               LLModel:
 *                 type: string,
 *                 example: 'suriya7/bart-finetuned-text-summarization'
 *     responses:
 *       200:
 *         description: OK
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 summary_text:
 *                   type: string
 *                   example: 'In RSA, the public key is generated by multiplying two large prime numbers, 
*                              and the private key is created through a different process involving the prime numbers p and q. 
*                              A user can then distribute his public key, and anyone wishing to send the user a message would encrypt their message using the public public key.'
 *       400:
 *         description: Url parameter is require. | Min size of summaryLength is 50 and max is 250. | Does not exist model with that name.
 *       404,
 *         description: Article could not be found.
 *       500:
 *         description: Internal Server Error
 */


    const summaryLengthMin = 50;
    const summaryLengthMax = 250;

    // Object's schema which should be sent to our API from user  *url is require and *length optional
    const schema = z.object({
        url: z.string().url(),
        summaryLength: z.number().min(summaryLengthMin).max(summaryLengthMax).optional(),
    
        LLModel: z.string().optional()
    });

    const errors = {
        url: "Url parameter is require.",
        summaryLength: `Min size of summaryLength is ${summaryLengthMin} and max is ${summaryLengthMax}.`,
    };


router.post("/summarize", async(req, res) => {
    try{
        const body = req.body;

        // If object possess url param than we can proceed into feature liable for fetch article
        const success = schema.safeParse(body);
        if(!success.success) var errMessage = errors[`${success.error.errors[0].path[0]}`];
    
        success.success? await getSummarizeOfArticle(body, res): [res.writeHead(400), res.end(JSON.stringify({error: errMessage}))] ;
    }
    catch(err)
    {
        catchError(err);
    }
    
})

export default router;